{"name":"Webhdfs","tagline":"Ruby client for Hadoop WebHDFS","body":"## Refactored webhdfs - A client library implementation for Hadoop WebHDFS, and HttpFs, for Ruby\r\n\r\nThe webhdfs gem is to access Hadoop WebHDFS (EXPERIMENTAL: and HttpFs). WebHDFS::Client is a client class, and WebHDFS::FileUtils is utility like 'fileutils'. \r\n\r\n## Installation\r\n\r\n    gem install webhdfs\r\n\r\n## Difference between WebHDFS and httpfs\r\n\r\nhttps://www.linkedin.com/today/post/article/20140717115238-176301000-accessing-hdfs-using-the-webhdfs-rest-api-vs-httpfs\r\n\r\nWebHDFS vs HttpFs Major difference between WebHDFS and HttpFs: WebHDFS needs access to all nodes of the cluster and when some data is read it is transmitted from that node directly, whereas in HttpFs, a singe node will act similar to a \"gateway\" and will be a single point of data transfer to the client node. So, HttpFs could be choked during a large file transfer but the good thing is that we are minimizing the footprint required to access HDFS.\r\n\r\n## Usage\r\n\r\n### WebHDFS::Client\r\n\r\nFor client object interface:\r\n\r\n    require 'webhdfs'\r\n    client = WebHDFS::Client.new(hostname, port)\r\n    # or with pseudo username authentication\r\n    client = WebHDFS::Client.new(hostname, port, username)\r\n\r\nTo create/append/read files:\r\n\r\n    client.create('/path/to/file', data)\r\n    client.create('/path/to/file', data, :overwrite => false, :blocksize => 268435456, :replication => 5, :permission => '0666')\r\n\r\n    #This does not require whole data in memory, and it can be read chunk by chunk, ex: File data\r\n    client.create('/path/to/file', file_IO_handle, :overwrite => false, :permission => 0666)\r\n\r\n    client.append('/path/to/existing/file', data)\r\n    \r\n    client.read('/path/to/target') #=> data\r\n    client.read('/path/to/target' :offset => 2048, :length => 1024) #=> data\r\n\r\nTo mkdir/rename/delete directories or files:\r\n\r\n    client.mkdir('/hdfs/dirname')\r\n    client.mkdir('/hdfs/dirname', :permission => '0777')\r\n    \r\n    client.rename(original_path, dst_path)\r\n    \r\n    client.delete(path)\r\n    client.delete(dir_path, :recursive => true)\r\n\r\nTo get status or list of files and directories:\r\n\r\n    client.stat(file_path) #=> key-value pairs for file status\r\n    client.list(dir_path)  #=> list of key-value pairs for files in dir_path\r\n\r\nAnd, 'content_summary', 'checksum', 'homedir', 'chmod', 'chown', 'replication' and 'touch' methods available.\r\n\r\nFor known errors, automated retries are available. Set `retry_known_errors` option as true.\r\n\r\n    #### To retry for LeaseExpiredException automatically\r\n    client.retry_known_errors = true\r\n    \r\n    # client.retry_interval = 1 # [sec], default: 1\r\n    # client.retry_times = 1 # [times], default: 1\r\n\r\n### WebHDFS::FileUtils\r\n\r\n    require 'webhdfs/fileutils'\r\n    WebHDFS::FileUtils.set_server(host, port)\r\n    # or\r\n    WebHDFS::FileUtils.set_server(host, port, username, doas)\r\n    \r\n    WebHDFS::FileUtils.copy_from_local(localpath, hdfspath)\r\n    WebHDFS::FileUtils.copy_to_local(hdfspath, localpath)\r\n    \r\n    WebHDFS::FileUtils.append(path, data)\r\n\r\n### For HttpFs\r\n\r\nFor HttpFs instead of WebHDFS:\r\n\r\n    client = WebHDFS::Client.new('hostname', 14000)\r\n    client.httpfs_mode = true\r\n    \r\n    client.read(path) #=> data\r\n    \r\n    # or with webhdfs/filetuils\r\n    WebHDFS::FileUtils.set_server('hostname', 14000)\r\n    WebHDFS::FileUtils.set_httpfs_mode\r\n    WebHDFS::FileUtils.copy_to_local(remote_path, local_path)\r\n\r\n### For HTTP Proxy servers\r\n\r\n    client = WebHDFS::Client.new('hostname', 14000, 'proxy.server.local', 8080)\r\n    client.proxy_user = 'jack'   # if needed\r\n    client.proxy_pass = 'secret' # if needed\r\n\r\n### For SSL\r\n\r\nNote that net/https and openssl libraries must be available:\r\n\r\n    client = WebHDFS::Client.new('hostname', 4443)\r\n    client.ssl = true\r\n    client.ssl_ca_file = \"/path/to/ca_file.pem\" # if needed\r\n    client.ssl_varify_mode = :peer # if needed (:none or :peer)\r\n    client.ssl_version = :TLSv1 # if needed\r\n\r\n### For Kerberos Authentication\r\n\r\nNote that [gssapi](https://github.com/zenchild/gssapi) library must be available:\r\n\r\n    client = WebHDFS::Client.new('hostname', 14000)\r\n    client.kerberos = true\r\n    client.kerberos_keytab = \"/path/to/project.keytab\"\r\n\r\n### For SSL Client Authentication\r\n\r\nNote that openssl libraries must be available:\r\n\r\n    require 'openssl'\r\n    \r\n    client = WebHDFS::Client.new(host, port)\r\n    client.ssl = true\r\n    client.ssl_key = OpenSSL::PKey::RSA.new(open('/path/to/key.pem'))\r\n    client.ssl_cert = OpenSSL::X509::Certificate.new(open('/path/to/cert.pem'))\r\n\r\n## AUTHORS\r\nOriginal Authors:\r\n* Kazuki Ohta <kazuki.ohta@gmail.com>\r\n* TAGOMORI Satoshi <tagomoris@gmail.com>\r\n* Refactoring done by Thomas Vincent <thomasvincent@gmail.com>\r\n\r\n## LICENSE\r\n* Copyright: Copyright (c) 2016- Thomas Vincent\r\n* Copyright: Copyright (c) 2012- Fluentd Project\r\n* License: Apache License, Version 2.0","google":"UA-43706788-1","note":"Don't delete this file! It's used internally to help with page regeneration."}